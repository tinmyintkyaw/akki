generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String               @id @default(cuid())
  sessionToken       String               @unique
  userId             String
  expires            DateTime
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  multiplayerSession MultiplayerSession[]
}

model MultiplayerSession {
  id        String   @id @default(cuid())
  key       String   @unique
  isUsed    Boolean  @default(false)
  expires   DateTime
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  typesenseKeyId Int?
  typesenseKey   String?
  accounts       Account[]
  sessions       Session[]
  pages          Page[]
  files          File[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id          String    @id @default(cuid())
  pageName    String
  ydoc        Bytes?
  textContent String
  isFavourite Boolean   @default(false)
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @default(now())
  accessedAt  DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  files       File[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    String?
  childPages  Page[]    @relation(name: "childPages")
  Page        Page?     @relation(name: "childPages", fields: [parentId], references: [id])

  @@unique([id, userId])
}

model File {
  id       String @id @default(cuid())
  fileName String @unique
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageId   String
  page     Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([id, userId, pageId])
}

model GlobalSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}
