generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @unique
  name           String
  username       String?  @unique
  image          String?
  email          String?  @unique
  email_verified Boolean?
  key            Key[]
  Page           Page[]
  File           File[]
  Setting        Setting?
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Page {
  id          String    @id @default(cuid())
  pageName    String
  ydoc        Bytes?
  textContent String
  isStarred   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @default(now())
  accessedAt  DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  files       File[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    String?
  childPages  Page[]    @relation(name: "childPages")
  Page        Page?     @relation(name: "childPages", fields: [parentId], references: [id])

  @@unique([id, userId])
}

model File {
  id       String @id @default(cuid())
  fileName String @unique
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageId   String
  page     Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([id, userId, pageId])
}

model Setting {
  id          String @id @default(cuid())
  editorWidth Int    @default(0)
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @unique
}

model GlobalVariables {
  id               Int    @id
  search_key_id    String
  search_key_value String
}
