generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @unique
  name           String
  username       String?  @unique
  image          String?
  email          String?  @unique
  email_verified Boolean?
  key            Key[]
  Page           Page[]
  File           File[]
  Setting        Setting?
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Page {
  id           String    @id @default(cuid())
  page_name    String
  ydoc         Bytes?
  text_content String
  is_starred   Boolean   @default(false)
  created_at   DateTime  @default(now())
  modified_at  DateTime  @default(now())
  accessed_at  DateTime  @default(now())
  is_deleted   Boolean   @default(false)
  deleted_at   DateTime?
  user_id      String
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent_id    String?
  files        File[]
  child_pages  Page[]    @relation(name: "childPages")
  page         Page?     @relation(name: "childPages", fields: [parent_id], references: [id])

  @@unique([id, user_id])
}

model File {
  id        String @id @default(cuid())
  file_name String @unique
  user_id   String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  page_id   String
  page      Page   @relation(fields: [page_id], references: [id], onDelete: Cascade)

  @@unique([id, user_id, page_id])
}

model Setting {
  id           String @id @default(cuid())
  editor_width Int    @default(0)
  user         User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String @unique
}

model GlobalVariables {
  id               Int    @id
  search_key_id    String
  search_key_value String
}
