// This schema is based on the recommended schema from the NextAuth.js docs
// https://next-auth.js.org/adapters/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocketSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  createdAt    DateTime
  isUsed       Boolean
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  socketSessions SocketSession[]
  collections    Collection[]
  pages          Page[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id             String    @id @default(cuid())
  collectionName String
  createdAt      DateTime  @default(now())
  modifiedAt     DateTime  @default(now())
  accessedAt     DateTime  @default(now())
  isDeleted      Boolean   @default(false)
  deletedAt      DateTime?
  isFavourite    Boolean   @default(false)
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages          Page[]

  @@unique([id, userId])
}

model Page {
  id           String     @id @default(cuid())
  pageName     String
  ydoc         Bytes?
  createdAt    DateTime   @default(now())
  modifiedAt   DateTime   @default(now())
  accessedAt   DateTime   @default(now())
  isDeleted    Boolean    @default(false)
  deletedAt    DateTime?
  isFavourite  Boolean    @default(false)
  textContent  String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([id, userId])
}

model GlobalSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}
