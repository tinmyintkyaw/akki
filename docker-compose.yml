version: "3"

services:
  caddy:
    container_name: caddy
    build:
      context: .
      dockerfile: Dockerfile
      target: caddy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    networks:
      - app-network
    volumes:
      - caddy-data:/data
      - caddy-config:/config

  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    restart: unless-stopped
    ports:
      - 3300:3300
    networks:
      - app-network
    volumes:
      - web-uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:15
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  typesense:
    container_name: typesense
    image: typesense/typesense:0.25.1
    restart: unless-stopped
    ports:
      - "8108:8108"
    environment:
      TYPESENSE_DATA_DIR: "/data"
      # TYPESENSE_ENABLE_CORS: "true"
    env_file:
      - .env
    volumes:
      - typesense-data:/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "apt install curl -y &>/dev/null || curl --silent --fail localhost:8108/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-data:
    name: postgres-data
  typesense-data:
    name: typesense-data
  caddy-data:
  caddy-config:
  web-uploads:

networks:
  app-network:
    name: app-network
